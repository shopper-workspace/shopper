version: '3.9'
services:
  mongo:
    image: mongo:6.0.5
    container_name: mongo
    restart: unless-stopped
    networks:
      - shopper
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    profiles:
      - infra

  postgres:
    image: postgres:15.2
    container_name: postgres
    restart: unless-stopped
    networks:
      - shopper
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../init/postgres-init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    profiles:
      - infra

  keycloak:
    image: quay.io/keycloak/keycloak:21.0
    container_name: keycloak
    restart: unless-stopped
    networks:
      - shopper
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak-user
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: keycloak
      KEYCLOAK_ADMIN_PASSWORD: password
    ports:
      - "8181:8080"
    volumes:
      - ../init/keycloak-init.json:/opt/keycloak/data/import/realm-export.json
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - postgres
    profiles:
      - infra

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: unless-stopped
    networks:
      - shopper
    ports:
      - "9411:9411"
    profiles:
      - infra

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    restart: unless-stopped
    networks:
      - shopper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
      - zookeeper_secrets:/etc/zookeeper/secrets
    profiles:
      - infra

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    restart: unless-stopped
    networks:
      - shopper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_secrets:/etc/kafka/secrets
    depends_on:
      - zookeeper
    profiles:
      - infra

  kafkaui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    networks:
      - shopper
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:29092"
    ports:
      - "8182:8080"
    depends_on:
      - zookeeper
      - kafka
    profiles:
      - infra

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - shopper
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ../init/prometheus-init.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    profiles:
      - infra

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - shopper
    environment:
      GF_SECURITY_ADMIN_USER: grafana
      GF_SECURITY_ADMIN_PASSWORD: password
    ports:
      - "3000:3000"
    volumes:
      - ../init/grafana-init.yml:/etc/grafana/provisioning/datasources/prometheus_ds.yml
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    profiles:
      - infra

  discovery-server:
    image: shopper/discovery-server:latest
    container_name: discovery-server
    restart: unless-stopped
    networks:
      - shopper
    ports:
      - "8761:8761"
    environment:
      SERVER_PORT: 8761
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    depends_on:
      - zipkin
    profiles:
      - backend

  api-gateway:
    image: shopper/api-gateway:latest
    container_name: api-gateway
    restart: unless-stopped
    networks:
      - shopper
    ports:
      - "8081:8080"
    expose:
      - "8081"
    environment:
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://host.docker.internal:8181/realms/shopper
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    depends_on:
      - discovery-server
      - zipkin
    profiles:
      - backend

  product-service:
    image: shopper/product-service:latest
    container_name: product-service
    restart: unless-stopped
    networks:
      - shopper
    environment:
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/product-service
    depends_on:
      - discovery-server
      - api-gateway
      - mongo
      - zipkin
    profiles:
      - backend

  order-service:
    image: shopper/order-service:latest
    container_name: order-service
    restart: unless-stopped
    networks:
      - shopper
    environment:
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/order-service
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_USERNAME: order-service-user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - discovery-server
      - api-gateway
      - postgres
      - zipkin
      - kafka
    profiles:
      - backend

  inventory-service:
    image: shopper/inventory-service:latest
    container_name: inventory-service
    restart: unless-stopped
    networks:
      - shopper
    environment:
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/inventory-service
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_USERNAME: inventory-service-user
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      - discovery-server
      - api-gateway
      - postgres
      - zipkin
    profiles:
      - backend

  notification-service:
    image: shopper/notification-service:latest
    container_name: notification-service
    restart: unless-stopped
    networks:
      - shopper
    environment:
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - discovery-server
      - api-gateway
      - zipkin
      - kafka
    profiles:
      - backend

networks:
  shopper:

volumes:
  mongo_data:
  mongo_config:
  postgres_data:
  zookeeper_data:
  zookeeper_log:
  zookeeper_secrets:
  kafka_data:
  kafka_secrets:
  prometheus_data:
  grafana_data: