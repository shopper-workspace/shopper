version: '3.9'
services:
  mongo:
    image: mongo:${MONGO_VERSION}
    container_name: mongo
    restart: unless-stopped
    networks:
      - shopper
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    profiles:
      - infra

  postgres:
    build:
      context: postgres
      args:
        POSTGRES_VERSION: ${POSTGRES_VERSION}
    container_name: postgres
    restart: unless-stopped
    networks:
      - shopper
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      KEYCLOAK_DB_NAME: keycloakdb
      KEYCLOAK_DB_USER: keycloak-user
      KEYCLOAK_DB_PASS: password
      PRODUCT_DB_NAME: productdb
      PRODUCT_DB_USER: product-service-user
      PRODUCT_DB_PASS: password
      INVENTORY_DB_NAME: inventorydb
      INVENTORY_DB_USER: inventory-service-user
      INVENTORY_DB_PASS: password
      PAYMENT_DB_NAME: paymentdb
      PAYMENT_DB_USER: payment-service-user
      PAYMENT_DB_PASS: password
      ORDER_DB_NAME: orderdb
      ORDER_DB_USER: order-service-user
      ORDER_DB_PASS: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/create-databases.sh:/docker-entrypoint-initdb.d/initdb.sh
    profiles:
      - infra

  keycloak:
    image: keycloak/keycloak:${KEYCLOAK_VERSION}
    container_name: keycloak
    restart: unless-stopped
    networks:
      - shopper
    command: [ "start-dev", "--import-realm" ]
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloakdb
      KC_DB_USERNAME: keycloak-user
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: keycloak
      KEYCLOAK_ADMIN_PASSWORD: password
    ports:
      - "8181:8080"
    volumes:
      - ./keycloak/create-realm.json:/opt/keycloak/data/import/realm-export.json
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - postgres
    profiles:
      - infra

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: unless-stopped
    networks:
      - shopper
    ports:
      - "9411:9411"
    profiles:
      - infra

  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    container_name: zookeeper
    restart: unless-stopped
    networks:
      - shopper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/zookeeper/data
      - zookeeper_txns:/zookeeper/txns
      - zookeeper_conf:/zookeeper/conf
    profiles:
      - infra

  kafka:
    image: debezium/kafka:${DEBEZIUM_VERSION}
    container_name: kafka
    restart: unless-stopped
    networks:
      - shopper
    environment:
      BROKER_ID: 1
      ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/kafka/data
      - kafka_config:/kafka/config
      - kafka_logs:/kafka/logs
    depends_on:
      - zookeeper
    profiles:
      - infra

  kafka-connect:
    image: debezium/connect:${DEBEZIUM_VERSION}
    container_name: kafka-connect
    restart: unless-stopped
    networks:
      - shopper
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: shopper_connect_configs
      OFFSET_STORAGE_TOPIC: shopper_connect_offsets
      STATUS_STORAGE_TOPIC: shopper_connect_statuses
    ports:
      - "8083:8083"
    volumes:
      - kafka_connect_data:/kafka/data
      - kafka_connect_config:/kafka/config
      - kafka_connect_logs:/kafka/logs
    depends_on:
      - kafka
    profiles:
      - infra

  kafkaui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    networks:
      - shopper
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      DYNAMIC_CONFIG_ENABLED: 'true'
    ports:
      - "8182:8080"
    depends_on:
      - zookeeper
      - kafka
    profiles:
      - infra

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - shopper
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ../init/prometheus-init.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    profiles:
      - infra

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - shopper
    environment:
      GF_SECURITY_ADMIN_USER: grafana
      GF_SECURITY_ADMIN_PASSWORD: password
    ports:
      - "8183:3000"
    volumes:
      - ../init/grafana-init.yml:/etc/grafana/provisioning/datasources/prometheus_ds.yml
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    profiles:
      - infra

  discovery-server:
    image: shopper/discovery-server:latest
    container_name: discovery-server
    restart: unless-stopped
    networks:
      - shopper
    ports:
      - "8761:8761"
    environment:
      SERVER_PORT: 8761
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    depends_on:
      - zipkin
    profiles:
      - backend

  api-gateway:
    image: shopper/api-gateway:latest
    container_name: api-gateway
    restart: unless-stopped
    networks:
      - shopper
    ports:
      - "8081:8080"
    environment:
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://host.docker.internal:8181/realms/shopper
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    depends_on:
      - discovery-server
      - zipkin
    profiles:
      - backend

  product-service:
    image: shopper/product-service:latest
    container_name: product-service
    restart: unless-stopped
    networks:
      - shopper
    environment:
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/productdb
    depends_on:
      - discovery-server
      - api-gateway
      - mongo
      - zipkin
    profiles:
      - backend

  order-service:
    image: shopper/order-service:latest
    container_name: order-service
    restart: unless-stopped
    networks:
      - shopper
    environment:
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/orderdb
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_USERNAME: order-service-user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - discovery-server
      - api-gateway
      - postgres
      - zipkin
      - kafka
    profiles:
      - backend

  inventory-service:
    image: shopper/inventory-service:latest
    container_name: inventory-service
    restart: unless-stopped
    networks:
      - shopper
    environment:
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/inventorydb
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_USERNAME: inventory-service-user
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      - discovery-server
      - api-gateway
      - postgres
      - zipkin
    profiles:
      - backend

  notification-service:
    image: shopper/notification-service:latest
    container_name: notification-service
    restart: unless-stopped
    networks:
      - shopper
    environment:
      SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - discovery-server
      - api-gateway
      - zipkin
      - kafka
    profiles:
      - backend

networks:
  shopper:

volumes:
  mongo_data:
  mongo_config:
  postgres_data:
  zookeeper_data:
  zookeeper_txns:
  zookeeper_conf:
  kafka_data:
  kafka_config:
  kafka_logs:
  kafka_connect_data:
  kafka_connect_config:
  kafka_connect_logs:
  prometheus_data:
  grafana_data: